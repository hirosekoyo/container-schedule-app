要件定義書 Ver.1.7 (最終版)：コンテナ船荷役予定管理アプリ
1. アプリ概要

アプリ名: （仮）コンテナ船荷役予定管理アプリ

目的: 手作業（Excel）で行われているコンテナ船の荷役予定作成・管理業務をデジタル化し、効率化を図る。関係者がPCやスマートフォンからリアルタイムに最新の予定を確認できる環境を構築する。

利用者: 荷役機器を管理する港湾管理会社の担当者。

解決したい課題:

Excelでの手作業による作成・更新の手間を削減したい。

船舶動静の変更に迅速かつ簡単に対応したい。

現場担当者がスマートフォンでリアルタイムに予定を確認できるようにしたい。

2. 機能要件

管理対象データ: 後述の「5. データベース設計」で定義されたテーブル構造に基づき、データを管理する。

船舶予定情報（船名、着岸時間など）

荷役作業情報（使用号機、本数など）

日次情報（当直者、風速など）

データ入力: 入力方法は、「2.4. データ自動解析」による支援と、フォームでの手動入力・修正を併用する。

メイン画面は、添付された完成画面イメージに基づき、以下の3つの主要エリアで構成される。

2.2.1. ヘッダー情報エリア (画面上部)

表示項目: 選択された日付の「日付」「当直者」「サポート者」「時間帯ごとの風速情報」を表示する。

データソース: daily_reports テーブルから取得する。

機能: 当直者や風速情報を入力・編集するためのボタンを配置する。

2.2.2. 船舶図（ガントチャート）エリア (画面中央)

縦軸: 時間（0:00 〜 翌2:00を2時間ごとに表示）。

横軸: 着岸場所（ビット番号: 33, 34, ...）。

表示内容:

各船舶予定(schedules)を、着岸時間・離岸時間・位置に基づき、矩形ブロックとして表示する。

矩形ブロック内には「船名」と、舷付け方向を示す「矢印（← or →）」を表示する。

「補修工事」のような船舶以外の予定も同様にブロックとして表示する。

2.2.3. 荷役予定詳細テーブルエリア (画面下部)

表示内容: 選択された日付の全予定をテーブル形式で表示する。

表示列: 岸壁, 船名, 着岸時間, 離岸時間, 方向(入/出), おもて, とも, 荷役開始, G(台数), 使用GC, 本数, GC運転, プランナ, 備考。

データソース: schedules テーブルと cargo_operations テーブルのデータを結合して表示する。

表示ロジック:

おもて とも 列: データベースにメートル(m)で保存されている bow_position_m と stern_position_m の値を、ビット表記（例: 42+15）に変換して表示する。

使用GC 本数 列: 1つの船舶予定に複数の荷役作業がある場合、それらをまとめて表示する。

機能: 各行に「編集」「削除」ボタンを配置する。

比較編集画面:

画面を左右に2分割。左側に「保存済みの予定」、右側に「新しい予定」のガントチャートを表示。

予定のコピー＆ペースト機能:

左側の予定ブロックを、右側のガントチャートにドラッグ＆ドロップ等でコピーできる。コピー時に荷役作業情報も引き継がれる。

入力支援: 右側の「新しい予定」を作成する際、「2.4. データ自動解析機能」を利用できる。

保存処理: 右側の内容で、その日の予定を上書き更新する。

目的: 特定フォーマットのテキストデータから、船舶予定情報を自動抽出し、入力の手間を削減する。

処理フロー:

フィルタリング: 着岸位置が33ビット以降の船舶データのみを処理対象とする。

データ抽出: テキストから船名、全長、綱位置、船尾ビットなどを抽出する。

データ加工・計算:

1ビット = 30mとして、とも位置(m)と船首位置(m)を計算する。

綱位置の大小関係から、舷付け方向（右舷/左舷）を判断する。

フォームへの反映: 計算結果を新規船舶予定の入力フォームに自動セットする。

3. 非機能要件

権限管理:

編集者: PCからのアクセスを想定。全データ操作が可能。

閲覧者: スマートフォンからのアクセスを想定。データの閲覧のみ可能。

データ保持期間:

データベースに保存・表示する荷役予定データは、実行日を基準に、前日から10日後までの範囲とする。

レスポンシブデザイン:

PCとスマートフォンの各デバイスに最適化されたUIを提供する。

開発フェーズ:

フェーズ1: 手動入力とデータ自動解析機能を実装する。

フェーズ2（将来）: WEBサイトからのデータ自動取得（スクレイピング）機能を実装する。

4. 開発・技術要件

認証: Supabase Auth を利用した、メールアドレスとパスワードによるログイン機能。

データベース: Supabase (PostgreSQL) を利用する。

技術スタック:

フレームワーク: Next.js (App Router)

言語: TypeScript

スタイリング: Tailwind CSS

UIコンポーネント: Shadcn/ui

バックエンド・プラットフォーム: Supabase

5. データベース設計

船の着岸に関する一度きりの情報を格納する。

code
SQL
download
content_copy
expand_less

CREATE TABLE schedules (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  schedule_date DATE NOT NULL,
  berth_number INT NOT NULL,
  ship_name TEXT NOT NULL,
  arrival_time TIME NOT NULL,
  departure_time TIME NOT NULL,
  arrival_side TEXT, -- '右舷' or '左舷'
  bow_position_m NUMERIC NOT NULL,
  stern_position_m NUMERIC NOT NULL,
  planner_company TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);

一つの船舶予定に対して、複数の荷役作業を登録できるように設計。

code
SQL
download
content_copy
expand_less
IGNORE_WHEN_COPYING_START
IGNORE_WHEN_COPYING_END
CREATE TABLE cargo_operations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  schedule_id BIGINT NOT NULL REFERENCES schedules(id) ON DELETE CASCADE,
  start_time TIME,
  crane_count INT,
  crane_names TEXT, -- 例: "5号機, 7号機"
  container_count INT,
  stevedore_company TEXT,
  remarks TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);

当直者や風速など、日付に紐づく情報を格納する。

code
SQL
download
content_copy
expand_less
IGNORE_WHEN_COPYING_START
IGNORE_WHEN_COPYING_END
CREATE TABLE daily_reports (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  report_date DATE NOT NULL UNIQUE,
  primary_staff TEXT,
  secondary_staff TEXT,
  support_staff TEXT,
  wind_speed_1 NUMERIC,
  wind_speed_2 NUMERIC,
  wind_speed_3 NUMERIC,
  wind_speed_4 NUMERIC,
  wind_speed_5 NUMERIC,
  wind_speed_6 NUMERIC,
  wind_speed_7 NUMERIC,
  wind_speed_8 NUMERIC,
  created_at TIMESTAMPTZ DEFAULT now()
);
6. 画面構成イメージ

別途提供された完成画面イメージを、UI/UXの最終的なゴールとする。