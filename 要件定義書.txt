要件定義書 Ver.2.0 (最新版)：コンテナ船荷役予定管理アプリ
1. アプリ概要
アプリ名: （仮）コンテナ船荷役予定管理アプリ
目的: 手作業で行われているコンテナ船の荷役予定作成・管理業務をデジタル化し、効率化を図る。関係者がPCやスマートフォンからリアルタイムに最新の予定を確認できる環境を構築する。
利用者: 荷役機器を管理する港湾管理会社の担当者。
解決したい課題:
手作業による作成・更新の手間を削減したい。
船舶動静の変更に迅速かつ簡単に対応したい。
現場担当者がスマートフォンでリアルタイムに予定を確認できるようにしたい。
2. 機能要件
後述の「5. データベース設計」で定義されたテーブル構造に基づき、データを管理する。
船舶予定情報: 船名、着岸・離岸日時、着岸位置など。
荷役作業情報: 使用GC、本数、備考など。
日次情報: 当直者、風速、メモなど。
入力方法は、「2.4. データ一括インポート機能」による自動解析と、各画面からの手動入力・修正を併用する。
メイン画面は、以下の主要エリアで構成される。
2.3.1. ヘッダー情報エリア (画面上部)
表示項目: 選択された日付の「日付」「当直者」「サポート者」「メモ」「時間帯ごとの風速情報」を表示する。
データソース: daily_reports テーブルから取得する。
機能: カード部分をクリックすると、当直者、風速、メモ情報を入力・編集するためのモーダルが表示される。
2.3.2. 船舶図（ガントチャート）エリア (画面中央)
縦軸: 時間（0:00 〜 翌2:00を2時間ごとに表示）。
横軸: 着岸場所（ビット番号: 33〜64）。画面幅に応じて動的に拡縮する。
表示内容:
各船舶予定(schedules)を、着岸時間・離岸時間・位置に基づき、矩形ブロックとして表示する。
矩形ブロック内には「船名」と、arrival_sideに応じた矢印（左舷→ ←, 右舷→ →）を表示する。
日をまたぐ予定は、各日付の滞在時間分だけが表示される。
33ビット未満に位置する船は、左端を33ビットに揃えて描画する。
ビット番号の上部に、クレーンの止め位置を示す静的なボックスを表示する。
機能:
各船舶ブロックをクリックすると、その予定を編集するためのモーダルが表示される。
データインポート直後には、変更があった予定や削除候補の予定がハイライト表示される。
2.3.3. 荷役予定詳細テーブルエリア (画面下部)
表示内容: 選択された日付の全予定をテーブル形式で表示する。
表示列: 岸壁, 船名, 着岸時間, 離岸時間, 方向(入/出), おもて, とも, 荷役開始, G(台数), 使用GC, 本数, GC運転, プランナ, 備考。
データソース: schedules テーブルと cargo_operations テーブルのデータを結合して表示する。
表示ロジック:
方向 列: arrival_sideが左舷の場合は「入」、右舷の場合は「出」を表示する。
おもて, とも 列: データベースにメートル(m)で保存されている整数値を、港湾業務の慣習に合わせたビット表記（例: 42+15, 58-03）に変換して表示する。
着岸時間, 離岸時間: schedule_dateと日付が異なる場合は、日付と時刻を2段で表示する。
機能:
各行をクリックすると、その予定を編集するためのモーダルが表示される。
各行の末尾にゴミ箱アイコンを配置。クリックすると確認ダイアログを経て、予定を削除する。
テーブルの最終行に「新規作成行」を表示。クリックすると、空の予定編集モーダルが表示される。
データインポート直後には、変更があった予定や削除候補の予定がハイライト表示される。
目的: 複数日分の船舶予定が記載された特定フォーマットのテキストデータから、予定情報を自動抽出し、データベースに一括登録する。
処理フロー:
テキスト入力: 専用ページで、複数日分のテキストデータをテキストエリアに貼り付ける。
データ分割: テキストを「連絡先」の行を区切りとして、個別の船舶データブロックに分割する。
データ抽出: 各ブロックから船名、全長、綱位置、船尾ビット、着岸・離岸日時、代理店などを正規表現で抽出する。船名の先頭にある数字や◆記号は除去して整形する。
データ加工・計算:
1ビット = 30mとして、とも位置(m)とおもて位置(m)を計算し、最も近い整数に丸める。
抽出した代理店名を、定義済みの変換マップに基づき荷役会社コード（例: GEN）に変換する。
各データの内容からハッシュ値 (data_hash) を計算する。
今回のインポート処理を識別する**ユニークID (last_import_id)**を生成する。
日をまたぐ予定は、滞在日数分のレコードに複製する。
データベース登録 (UPSERT):
schedule_dateとship_nameの組み合わせで既存データを探す。
存在しない場合: 新規作成 (INSERT) する。
存在し、かつdata_hashが異なる場合: データを上書き (UPDATE) し、**update_flgをtrue**にする。
存在し、かつdata_hashが同じ場合: last_import_idのみを更新し、**update_flgをfalse**にする。
リダイレクト: 処理完了後、インポートしたデータの翌日のダッシュボードに、importIdを付けてリダイレクトする。
3. 非機能要件
権限管理: 開発中は認証なし。将来的には編集者と閲覧者の権限を分離。
レスポンシブデザイン: PCとスマートフォンの各デバイスに最適化されたUIを提供する。
4. 開発・技術要件
認証: （将来実装）Supabase Auth
データベース: Supabase (PostgreSQL)
技術スタック:
フレームワーク: Next.js (App Router)
言語: TypeScript
スタイリング: Tailwind CSS
UIコンポーネント: Shadcn/ui, date-fns
5. データベース設計 (Ver.2.0)
5.1. schedules (船舶予定テーブル)
日またぎの予定は、滞在日数分レコードが作成される。
code
SQL
CREATE TABLE schedules (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  schedule_date DATE NOT NULL,
  ship_name TEXT NOT NULL,
  berth_number INT NOT NULL,
  arrival_time TIMESTAMP NOT NULL,      -- 型変更: TIME -> TIMESTAMP
  departure_time TIMESTAMP NOT NULL,    -- 型変更: TIME -> TIMESTAMP
  arrival_side TEXT,                    -- '右舷' or '左舷'
  bow_position_m NUMERIC NOT NULL,
  stern_position_m NUMERIC NOT NULL,
  planner_company TEXT,
  -- === 追加カラム ===
  data_hash TEXT,                       -- データ内容のハッシュ値
  last_import_id TEXT,                  -- 最終インポートID
  update_flg BOOLEAN DEFAULT FALSE,     -- インポート時に内容が更新されたか
  created_at TIMESTAMPTZ DEFAULT now(),
  -- === 制約 ===
  CONSTRAINT schedules_date_name_unique UNIQUE (schedule_date, ship_name)
);
5.2. cargo_operations (荷役予定テーブル)
code
SQL
CREATE TABLE cargo_operations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  schedule_id BIGINT NOT NULL REFERENCES schedules(id) ON DELETE CASCADE,
  start_time TIMESTAMP,                 -- 型変更: TIME -> TIMESTAMP
  crane_names TEXT,
  container_count INT,
  stevedore_company TEXT,
  remarks TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);
5.3. daily_reports (日次情報テーブル)
code
SQL
CREATE TABLE daily_reports (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  report_date DATE NOT NULL UNIQUE,
  primary_staff TEXT,
  secondary_staff TEXT,
  support_staff TEXT,
  wind_speed_1 NUMERIC,
  wind_speed_2 NUMERIC,
  wind_speed_3 NUMERIC,
  wind_speed_4 NUMERIC,
  wind_speed_5 NUMERIC,
  wind_speed_6 NUMERIC,
  wind_speed_7 NUMERIC,
  wind_speed_8 NUMERIC,
  memo TEXT,                            -- 追加カラム: メモ
  created_at TIMESTAMPTZ DEFAULT now()
);