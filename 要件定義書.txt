要件定義書 Ver.5.0 (プロジェクト再現可能版)
1. アプリ概要
アプリ名: コンテナ船荷役予定管理アプリ
目的: 手作業で行われているコンテナ船の荷役予定作成・管理業務をデジタル化し、効率化を図る。関係者がPCやスマートフォンからリアルタイムに最新の予定を確認・編集できる環境を構築する。
利用者: 荷役機器を管理する港湾管理会社の担当者。
2. 機能要件
日付ごとの予定を表示・編集するメイン画面。初回表示の高速化のため、ページ本体はサーバーコンポーネントとしてデータ取得を行い、インタラクティブなUI部分はクライアントコンポーネント(DashboardClient)に分離したハイブリッドレンダリング方式を採用。
ページナビゲーション (DateNavigator):
表示日付の前日・翌日に移動するための矢印ボタンを配置。
現在の日付をクリックするとカレンダーが表示され、任意の日付にジャンプできる。
ページ遷移時、URLクエリパラメータに含まれるimportIdを維持する。
ヘッダー情報エリア (DashboardHeader):
横長1列の4ブロック構成で、通常時・印刷時で共通のレイアウトを採用。
ブロック1 (タイトル): 「IC」と太文字で表示。
ブロック2 (日付・当直): 選択された日付の「日付」「当直者」「サポート者」を表示。
ブロック3 (風速・ミーティング): 上段に「ミーティング時間」「早出かわし時間」、下段に8段階の「風速テーブル」を表示。風速の値に応じてセルが色分けされる（10以上:黄, 16以上:オレンジ, 20以上:赤）。
ブロック4 (点検): 「点検予定」「終了点検」を表示。
通常表示時、カード全体をクリックすると、日次情報を編集するためのモーダル(EditDailyReportDialog)が表示される。
船舶図（ガントチャート）エリア (GanttChart):
縦軸: 時間（0:00 〜 翌2:00）。グリッド線は1時間毎、太線と時刻ラベルは3時間毎。
横軸: ビット番号（33〜64）。画面幅に応じて動的に拡縮する。
クレーン止め位置: ビット番号の上部に、クレーンの止め位置を示す静的な番号ボックスを表示。
差分ハイライト: インポート直後は、last_import_idとchanged_fieldsの値に基づき、削除候補（赤）、変更あり（黄）の矩形ブロックを色分け表示する。
各ブロッククリックで予定編集モーダル(EditScheduleDialog)が開く。
荷役予定詳細テーブルエリア (ScheduleTable):
DBから岸壁 (昇順) > 着岸時間 (昇順)の順でソートして表示。
G数: schedules.crane_countの値を表示（0の場合は'-'）。
PILOT/TUG: schedules.pilot, schedules.tugの値を「有」「無」で表示。
各行クリックで予定編集モーダルが開く。ゴミ箱アイコンクリックで予定を削除。
最終行に「新規作成行」を常設し、クリックで空の予定編集モーダルが開く。
日次情報編集モーダル (EditDailyReportDialog):
当直者、サポート者、風速（個別・一括）、点検予定(maintenance_unit)、終了点検(tenkenkubun)、ミーティング時間、早出かわし時間、会社を編集可能。
点検予定: クレーン名ボタンとフリー入力欄で、カンマ区切りの文字列として保存。
終了点検: 前回値から自動で次の区分をセット。「変更」ボタンでC1→C2→D→C1と循環する。
時刻入力: 5:00-9:00の30分刻みのカスタムコンポーネント(TimePicker)を使用。クリアボタン付き。
コンテンツが長い場合は、フォームエリアのみがスクロールし、保存ボタンはフッターに固定される。
予定編集モーダル (EditScheduleDialog):
アコーディオンUI: 編集頻度の低い「船舶情報」は初期状態で折りたたまれている。
G数 (crane_count): 荷役作業行の追加・削除に連動して自動でカウントが更新される。
PILOT/TUG: チェックボックスでtrue/falseを編集。
モバイル用ガントチャート (MobileGanttChart):
ズーム機能: ピンチイン・ピンチアウト、および画面右下のズームボタンで段階的なズームが可能。ダブルタップで全体表示に戻る。ズームは常に画面中央が基点となる。
スクロール: ズーム時は縦横にスクロール可能。スクロールバーは非表示。
情報表示: 各船舶ブロックをタップすると、詳細情報がPopoverで表示される。
ダッシュボードの「印刷」ボタンから新しいタブで開かれる、A4横向きに最適化されたページ。
レイアウト:
DashboardHeaderは印刷専用のレイアウトで表示。
GanttChartの下に、隙間をあけてクレーンの障害物チャート(CraneLimitChartの描画ロジック)と、対応するビット番号が表示される。
CraneLimitChartの下に、極限位置テーブルが表示される。
操作UI（日付ナビ、インポートボタン）は非表示。
中央目安線: 画面プレビュー時のみ、用紙の縦横中央を示す目安線（トンボ）が表示される。
3. 非機能要件
権限管理: 開発中は認証なし。
レスポンシブデザイン: PC（通常画面）、スマートフォン、A4用紙（印刷画面）に最適化。
4. 開発・技術要件
データベース: Supabase (PostgreSQL)
技術スタック: Next.js (App Router), TypeScript, Tailwind CSS, Shadcn/ui, Sonner, date-fns, lucide-react
5. データベース設計 (Ver.5.0)
code
SQL
CREATE TABLE public.schedules (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  schedule_date DATE NOT NULL,
  ship_name TEXT NOT NULL,
  berth_number INT NOT NULL,
  arrival_time TIMESTAMP NOT NULL,
  departure_time TIMESTAMP NOT NULL,
  arrival_side TEXT,
  bow_position_m NUMERIC NOT NULL,
  stern_position_m NUMERIC NOT NULL,
  planner_company TEXT,
  remarks TEXT,
  data_hash TEXT,
  last_import_id TEXT,
  changed_fields JSONB,
  -- Ver.4.1からの追加
  pilot BOOLEAN NOT NULL DEFAULT false,
  tug BOOLEAN NOT NULL DEFAULT false,
  crane_count INTEGER,
  created_at TIMESTAMPTZ DEFAULT now()
);
5.2. cargo_operations (荷役予定テーブル)
code
SQL
CREATE TABLE public.cargo_operations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  schedule_id BIGINT NOT NULL REFERENCES public.schedules(id) ON DELETE CASCADE,
  start_time TIMESTAMP,
  crane_names TEXT,
  container_count INT,
  stevedore_company TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);
5.3. ic_daily (日次情報テーブル)
code
SQL
CREATE TABLE public.ic_daily (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  report_date DATE NOT NULL UNIQUE,
  primary_staff TEXT,
  secondary_staff TEXT,
  support_staff TEXT,
  wind_speed_1 NUMERIC, wind_speed_2 NUMERIC,
  wind_speed_3 NUMERIC, wind_speed_4 NUMERIC,
  wind_speed_5 NUMERIC, wind_speed_6 NUMERIC,
  wind_speed_7 NUMERIC, wind_speed_8 NUMERIC,
  maintenance_unit TEXT,
  -- Ver.4.1からの追加
  tenkenkubun INTEGER,
  meeting_time TIME WITHOUT TIME ZONE,
  kawasi_time TIME WITHOUT TIME ZONE,
  company TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);
CREATE TABLE public.posts (
  -- 主キー: 自動採番されるID
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

  -- 作成日時: タイムゾーン情報を含むタイムスタンプ。自動的に記録されます。
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),

  -- 差出人 (From): TEXT型 (文字列)
  "from" TEXT,

  -- 宛先 (To): TEXT型 (文字列)
  "to" TEXT,
  
  -- 掲載期限: DATE型 (日付のみ)
  -- この日を過ぎたら表示しない、などのロジックに使用できます。
  expiration_date DATE,

  -- 内容: TEXT型 (文字列)
  content TEXT NOT NULL,

  -- アテンションフラグ: BOOLEAN型 (true/false)
  -- デフォルトはfalse(通常)に設定
  is_attention BOOLEAN NOT NULL DEFAULT false
);

-- テーブルとカラムにコメントを追加 (後から管理しやすくするため推奨)
COMMENT ON TABLE public.posts IS 'ホーム画面に表示する掲示板の投稿';
COMMENT ON COLUMN public.posts."from" IS '差出人';
COMMENT ON COLUMN public.posts."to" IS '宛先';
COMMENT ON COLUMN public.posts.expiration_date IS 'この日を過ぎたら表示しないための掲載期限';
COMMENT ON COLUMN public.posts.content IS '掲示内容の本文';
COMMENT ON COLUMN public.posts.is_attention IS 'trueの場合、目立たせるためのフラグ';

6. Supabase DB関数 (構成SQL)
6.1. upsert_schedules_with_check (一括インポート用)
役割: 受け取ったスケジュールデータの配列を元に、高度なUPSERT処理を行う。remarks と changed_fields を正しく処理する。
code
SQL
CREATE OR REPLACE FUNCTION public.upsert_schedules_with_check(schedules_data jsonb)
RETURNS TABLE(updated_count integer, inserted_count integer)
LANGUAGE plpgsql
AS $$
DECLARE
  new_schedule JSONB; existing_schedule RECORD; _updated_count INT := 0; _inserted_count INT := 0;
  old_values TEXT[]; new_values TEXT[];
  field_names TEXT[] := ARRAY['ship_name', 'berth_number', 'arrival_time', 'departure_time', 'arrival_side', 'bow_position_m', 'stern_position_m', 'planner_company'];
  changed_fields_array TEXT[]; i INT;
BEGIN
  FOR new_schedule IN SELECT * FROM jsonb_array_elements(schedules_data) LOOP
    SELECT * INTO existing_schedule FROM public.schedules WHERE schedule_date = (new_schedule->>'schedule_date')::DATE AND ship_name = (new_schedule->>'ship_name');
    
    IF existing_schedule IS NULL THEN
      INSERT INTO public.schedules (
        ship_name, berth_number, arrival_time, departure_time, arrival_side,
        bow_position_m, stern_position_m, planner_company, schedule_date,
        data_hash, last_import_id, changed_fields, remarks
      ) VALUES (
        new_schedule->>'ship_name', (new_schedule->>'berth_number')::INT, (new_schedule->>'arrival_time')::TIMESTAMP,
        (new_schedule->>'departure_time')::TIMESTAMP, new_schedule->>'arrival_side', (new_schedule->>'bow_position_m')::NUMERIC,
        (new_schedule->>'stern_position_m')::NUMERIC, new_schedule->>'planner_company', (new_schedule->>'schedule_date')::DATE,
        new_schedule->>'data_hash', new_schedule->>'last_import_id', (new_schedule->'changed_fields')::JSONB, new_schedule->>'remarks'
      );
      _inserted_count := _inserted_count + 1;
    ELSE
      IF existing_schedule.data_hash IS DISTINCT FROM (new_schedule->>'data_hash') THEN
        old_values := string_to_array(existing_schedule.data_hash, '|'); new_values := string_to_array(new_schedule->>'data_hash', '|'); changed_fields_array := ARRAY[]::TEXT[];
        FOR i IN 1..array_length(field_names, 1) LOOP IF old_values[i] IS DISTINCT FROM new_values[i] THEN changed_fields_array := array_append(changed_fields_array, field_names[i]); END IF; END LOOP;
        UPDATE public.schedules SET
          arrival_time = (new_schedule->>'arrival_time')::TIMESTAMP, departure_time = (new_schedule->>'departure_time')::TIMESTAMP,
          arrival_side = new_schedule->>'arrival_side', bow_position_m = (new_schedule->>'bow_position_m')::NUMERIC, stern_position_m = (new_schedule->>'stern_position_m')::NUMERIC,
          planner_company = new_schedule->>'planner_company', berth_number = (new_schedule->>'berth_number')::INT, remarks = new_schedule->>'remarks',
          data_hash = new_schedule->>'data_hash', last_import_id = new_schedule->>'last_import_id',
          changed_fields = CASE WHEN array_length(changed_fields_array, 1) > 0 THEN to_jsonb(changed_fields_array) ELSE NULL END
        WHERE id = existing_schedule.id;
        _updated_count := _updated_count + 1;
      ELSE
        UPDATE public.schedules SET
          last_import_id = new_schedule->>'last_import_id',
          changed_fields = NULL,
          remarks = new_schedule->>'remarks' -- 備考も更新対象に含める
        WHERE id = existing_schedule.id;
        _updated_count := _updated_count + 1;
      END IF;
    END IF;
  END LOOP;
  RETURN QUERY SELECT _updated_count, _inserted_count;
END;
$$;
6.2. create_schedule_with_operations (手動での新規作成用)
code
SQL
CREATE OR REPLACE FUNCTION public.create_schedule_with_operations(schedule_data jsonb, operations_data jsonb)
RETURNS bigint LANGUAGE plpgsql AS $$
DECLARE new_schedule_id bigint; op jsonb;
BEGIN
  INSERT INTO public.schedules (
    ship_name, berth_number, arrival_time, departure_time, arrival_side, 
    bow_position_m, stern_position_m, planner_company, schedule_date, 
    data_hash, last_import_id, changed_fields, remarks,
    pilot, tug, crane_count -- 追加
  )
  VALUES (
    schedule_data->>'ship_name', (schedule_data->>'berth_number')::INT, 
    (schedule_data->>'arrival_time')::TIMESTAMP, (schedule_data->>'departure_time')::TIMESTAMP, 
    schedule_data->>'arrival_side', (schedule_data->>'bow_position_m')::NUMERIC, 
    (schedule_data->>'stern_position_m')::NUMERIC, schedule_data->>'planner_company', 
    (schedule_data->>'schedule_date')::DATE, schedule_data->>'data_hash', 
    schedule_data->>'last_import_id', (schedule_data->'changed_fields')::JSONB, 
    schedule_data->>'remarks',
    (schedule_data->>'pilot')::BOOLEAN, (schedule_data->>'tug')::BOOLEAN, -- 追加
    (schedule_data->>'crane_count')::INTEGER -- 追加
  )
  RETURNING id INTO new_schedule_id;
  
  IF operations_data IS NOT NULL AND jsonb_array_length(operations_data) > 0 THEN
    FOR op IN SELECT * FROM jsonb_array_elements(operations_data) LOOP
      INSERT INTO public.cargo_operations (schedule_id, start_time, crane_names, container_count, stevedore_company)
      VALUES (new_schedule_id, (op->>'start_time')::TIMESTAMP, op->>'crane_names', (op->>'container_count')::INT, op->>'stevedore_company');
    END LOOP;
  END IF;
  RETURN new_schedule_id;
END;
$$;
6.3. update_schedule_with_operations (手動での更新用)
code
SQL
CREATE OR REPLACE FUNCTION public.update_schedule_with_operations(p_schedule_id bigint, schedule_data jsonb, operations_data jsonb)
RETURNS void LANGUAGE plpgsql AS $$
DECLARE op jsonb;
BEGIN
  UPDATE public.schedules SET
    ship_name = schedule_data->>'ship_name', arrival_time = (schedule_data->>'arrival_time')::TIMESTAMP, departure_time = (schedule_data->>'departure_time')::TIMESTAMP,
    arrival_side = schedule_data->>'arrival_side', bow_position_m = (schedule_data->>'bow_position_m')::NUMERIC, stern_position_m = (schedule_data->>'stern_position_m')::NUMERIC,
    planner_company = schedule_data->>'planner_company', berth_number = (schedule_data->>'berth_number')::INT, remarks = schedule_data->>'remarks',
    pilot = (schedule_data->>'pilot')::BOOLEAN, -- 追加
    tug = (schedule_data->>'tug')::BOOLEAN,     -- 追加
    crane_count = (schedule_data->>'crane_count')::INTEGER, -- 追加
    data_hash = schedule_data->>'data_hash', last_import_id = schedule_data->>'last_import_id', changed_fields = NULL
  WHERE id = p_schedule_id;

  DELETE FROM public.cargo_operations WHERE schedule_id = p_schedule_id;
  
  IF operations_data IS NOT NULL AND jsonb_array_length(operations_data) > 0 THEN
    FOR op IN SELECT * FROM jsonb_array_elements(operations_data) LOOP
      INSERT INTO public.cargo_operations (schedule_id, start_time, crane_names, container_count, stevedore_company)
      VALUES (p_schedule_id, (op->>'start_time')::TIMESTAMP, op->>'crane_names', (op->>'container_count')::INT, op->>'stevedore_company');
    END LOOP;
  END IF;
END;
$$;
6.4. truncate_schedules_and_dependencies (データリセット用)
code
SQL
CREATE OR REPLACE FUNCTION public.get_latest_tenkenkubun()
RETURNS TABLE(report_date date, tenkenkubun integer)
LANGUAGE sql
AS $$
  SELECT report_date, tenkenkubun
  FROM public.ic_daily
  WHERE tenkenkubun IS NOT NULL
  ORDER BY report_date DESC
  LIMIT 1;
$$;
-- DB関数として定義することで、RLS(Row Level Security)が有効な場合でも安全に呼び出せる
(注: actions.ts内で直接SQLを書いても機能しますが、関数化が推奨されます)

7. プロジェクトディレクトリ構成と各ファイルの概要 (Ver.5.0)
7. 環境変数設定
プロジェクトのルートディレクトリに.env.localファイルを作成し、以下の内容を記述する。値はSupabaseプロジェクトのダッシュボード（Settings > API）から取得する。
code
Code
NEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_URL
NEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
8. プロジェクトディレクトリ構成と各ファイルの概要 (最終FIX版)
8.1. ディレクトリ構成図
code
.
├── /app/                                  # Next.jsのApp Router。フォルダ構造がURLになる
│   ├── /dashboard/                      # PC版ダッシュボード関連 (/dashboard/...)
│   │   ├── /[date]/
│   │   │   └── page.tsx                 # 【サーバー】ダッシュボード本体。データ取得とUIコンテナの役割
│   │   └── /import/
│   │       └── page.tsx                 # 【クライアント】データ一括インポートページ
│   ├── /home/
│   │   └── page.tsx                     # 【クライアント】PCユーザー向けのトップページ（メニュー画面）
│   ├── /login/
│   │   └── page.tsx                     # 【クライアント】ログインフォームページ
│   ├── /mobile/                         # モバイル専用画面関連 (/mobile/...)
│   │   └── /[date]/
│   │       └── page.tsx                 # 【サーバー】スマートフォン用閲覧画面。データ取得を行う
│   └── /print/                          # 印刷プレビュー関連 (/print/...)
│       ├── /[date]/
│       │   ├── PrintPageClient.tsx      # 【クライアント】印刷レイアウトの構築と印刷実行
│       │   └── page.tsx                 # 【サーバー】印刷用データの取得
│       ├── layout.tsx                   # 印刷ページ専用の最小限HTMLレイアウト
│       └── print.css                    # 印刷専用スタイルシート
│   ├── globals.css                      # アプリ全体のグローバルCSS
│   ├── layout.tsx                       # アプリ全体のルートレイアウト（フォント、メタデータ定義）
│   └── page.tsx                         # 【クライアント】ルート(`/`)。デバイスを判別しリダイレクト
├── /public/                               # 静的ファイル置き場
│   ├── /icons/
│   │   ├── icon-192x192.png             # PWA用アプリアイコン (中サイズ)
│   │   └── icon-512x512.png             # PWA用アプリアイコン (大サイズ)
│   └── manifest.json                    # PWAの設定ファイル
├── /src/
│   ├── /components/                     # 再利用可能なUIコンポーネント
│   │   ├── /ui/
│   │   │   └── Combobox.tsx             # 自由入力可能なカスタムコンボボックス
│   │   ├── AnchorInfoModal.tsx          # 【クライアント】モバイル用。アンカー/極限位置情報モーダル
│   │   ├── DashboardClient.tsx          # 【クライアント】PC版ダッシュボードのUIと状態管理の親コンポーネント
│   │   ├── DashboardHeader.tsx          # 【クライアント】日付、当直者、風速情報を表示するヘッダー
│   │   ├── DateNavigator.tsx            # 【クライアント】日付遷移ボタンとカレンダー
│   │   ├── DateTimePicker.tsx           # 【クライアント】カスタム日時ピッカー
│   │   ├── EditDailyReportDialog.tsx    # 【クライアント】日時情報編集モーダル
│   │   ├── EditScheduleDialog.tsx       # 【クライアント】船舶・荷役予定の編集/新規作成モーダル
│   │   ├── GanttChart.tsx               # 【クライアント】PC版の船舶図（ガントチャート）
│   │   ├── MemoEdit.tsx                 # 【クライアント】日次メモの編集/表示コンポーネント
│   │   ├── MobileGanttChart.tsx         # 【クライアント】スマートフォン専用のスクロール追従型ガントチャート
│   │   ├── MobileViewClient.tsx         # 【クライアント】スマートフォン画面のUIと状態管理の親コンポーネント
│   │   └── ScheduleTable.tsx            # 【クライアント】荷役予定詳細テーブル
│   ├── /lib/
│   │   ├── /supabase/
│   │   │   ├── actions.ts               # 【サーバー】Supabaseと連携する全てのサーバーアクション（DB操作関数）
│   │   │   └── server.ts                # サーバー用のSupabaseクライアントを生成するヘルパー
│   │   ├── constants.ts                 # アプリ全体で共有する定数（選択肢リスト、変換マップなど）
│   │   ├── coordinateConverter.ts       # ビット表記とメートル座標を相互変換する計算ロジック
│   │   └── parser.ts                    # テキストデータを解析し、DB保存用のJSONに変換するロジック
│   └── /types/
│       └── database.types.ts            # Supabase CLIによって自動生成されるDBスキーマのTypeScript型定義
├── .env.local                             # Supabase接続情報などの環境変数ファイル (Git管理外)
├── middleware.ts                          # 【サーバーエッジ】認証チェックとリダイレクトを行う
├── next.config.js                         # Next.jsのプロジェクト設定（PWA設定含む）
└── package.json                         # プロジェクトの依存関係とスクリプト定義
8.2. 各ファイルの概要説明
/page.tsx: 【クライアント】アプリケーションのルート (/)。デバイス（PC/モバイル）を判別し、適切なトップページ (/home or /mobile/[今日の日付]) にリダイレクトする。
/home/page.tsx: 【クライアント】PCユーザー向けのトップページ。主要機能へのリンクメニューを表示する。
/login/page.tsx: 【クライアント】ログインフォームを表示するページ。Supabase Auth UIを利用。
/dashboard/[date]/page.tsx: 【サーバー】PC版ダッシュボードのメインページ。URLの日付に基づいてサーバーサイドでデータを取得し、DashboardClientに渡す役割。
/dashboard/import/page.tsx: 【クライアント】テキストデータを貼り付けて一括インポートを行うUI。
/mobile/[date]/page.tsx: 【サーバー】スマートフォン専用の閲覧画面。URLの日付でデータを取得し、MobileViewClientに渡す。
/print/[date]/page.tsx: 【サーバー】印刷用のデータを取得し、PrintPageClientに渡す。
/print/layout.tsx: 印刷ページ専用の最小限のHTMLレイアウト。
/print/print.css: 印刷専用のスタイルシート。
/layout.tsx: アプリケーション全体のルートレイアウト。フォントや基本的なメタデータを定義。
/icons/: PWAとしてホーム画面に追加されたときなどに使われるアプリアイコン。
manifest.json: PWAの設定ファイル。アプリ名、テーマカラーなどを定義。
/ui/: Shadcn/uiによって生成された、ボタンやテーブルなどの基本的なUI部品。
AnchorInfoModal.tsx: 【クライアント】モバイル画面用。アンカー位置と極限位置の情報を表示するモーダル。
DashboardClient.tsx: 【クライアント】PC版ダッシュボードの主要UIをまとめるコンテナ。モーダルの開閉などの状態管理も担当。
DashboardHeader.tsx: 【クライアント】日付、当直者、風速情報を表示するヘッダー。
DateNavigator.tsx: 【クライアント】日付遷移ボタンとカレンダーピッカー。basePath propsにより、PC版とモバイル版で遷移先を切り替える。
DateTimePicker.tsx: 【クライアント】日付と15分刻みの時刻を選択するカスタムUI。
EditDailyReportDialog.tsx: 【クライアント】日時情報（当直者、風速、メモ）を編集するモーダル。
EditScheduleDialog.tsx: 【クライアント】船舶・荷役予定を編集・新規作成する高機能モーダル。
GanttChart.tsx: 【クライアント】PC版の船舶図（ガントチャート）。レスポンシブな幅計算を内包。
MemoEdit.tsx: 【クライアント】日次メモを表示・編集する専用コンポーネント。
MobileGanttChart.tsx: 【クライアント】スマートフォン専用のガントチャート。横スクロールと固定軸表示に対応。
MobileViewClient.tsx: 【クライアント】スマートフォン画面の主要UIをまとめるコンテナ。
ScheduleTable.tsx: 【クライアント】荷役予定詳細を表示するテーブル。
/supabase/actions.ts: 【サーバー】Supabaseと連携する全てのサーバーアクション（DB操作関数）。
/supabase/server.ts: サーバーコンポーネント/アクション用のSupabaseクライアントを生成するヘルパー。
constants.ts: アプリ全体で共有する定数（荷役会社リスト、クレーンリスト、プランナ変換マップなど）。
coordinateConverter.ts: 港の物理的なビットとメートル座標を相互に変換するための、専門的かつ重要な計算ロジックをカプセル化。
parser.ts: テキストデータを解析し、DB保存用のJSONに変換するロジック。
database.types.ts: Supabase CLIによって自動生成される、DBスキーマのTypeScript型定義。DBスキーマ変更後は必ず再生成が必要。
middleware.ts: 【サーバーエッジ】すべてのリクエストを監視し、未ログインユーザーを/loginにリダイレクトさせる認証保護のロジック。
.env.local: Supabase接続情報などの環境変数を定義するファイル (Git管理外)。
next.config.js: Next.jsのプロジェクト設定ファイル。PWAの設定もここに含まれる。
package.json: プロジェクトの依存関係とスクリプトを定義するファイル。
/src/components/ui/TimePicker.tsx: 【クライアント・新規】Selectコンポーネントをベースにした、5:00-9:00の30分刻みのカスタム時刻ピッカー。
/src/components/CraneLimitChart.tsx: 【クライアント・変更】印刷ページで、クレーンの極限位置情報テーブルと、ミーティング・終了点検テーブルを表示する複合コンポーネント。
/src/components/DashboardHeader.tsx: ヘッダーのレイアウトを全面的に刷新。通常時・印刷時で共通化されたUI。
/src/components/EditDailyReportDialog.tsx: 終了点検、ミーティング時間、会社など、ic_dailyテーブルの全カラムを編集する機能を追加。
/src/components/EditScheduleDialog.tsx: pilot, tug, crane_countを編集するUIを追加。船舶情報セクションはアコーディオンで折りたたみ可能。
/src/components/GanttChart.tsx: 印刷時に、自身のコンポーネント下部に障害物チャート（BUSBAR, CB）を描画する機能が統合された。
/src/components/MobileGanttChart.tsx: ズーム機能がピンチイン・アウト、ボタン操作、ダブルタップリセットに変更。画面中央基点のズームを実現。
/src/lib/constants.ts: TIME_OPTIONS_30_MINUTES, tenkenkubunなどの定数が追加された。
/src/lib/supabase/actions.ts: getLatestTenkenkubunサーバーアクションが追加された。